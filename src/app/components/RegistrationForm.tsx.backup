import { useState, useRef, useEffect } from "react";
import { Course, FormErrors, VoiceRecordingState, FormState } from "../types";

interface RegistrationFormProps {
  courses: Course[];
  selectedCourse: string;
  setSelectedCourse: (course: string) => void;
}

export default function RegistrationForm({
  courses,
  selectedCourse,
  setSelectedCourse,
}: RegistrationFormProps) {
  // Voice recording states
  const [voiceState, setVoiceState] = useState<VoiceRecordingState>({
    isRecording: false,
    audioBlob: null,
    audioUrl: null,
    recordingTime: 0,
    isPlaying: false,
    recordingError: null,
  });

  // Form states
  const [formState, setFormState] = useState<FormState>({
    isSubmitting: false,
    isUploadingVoice: false,
    formErrors: {},
    submitSuccess: false,
    submitMessage: "",
  });

  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // API Configuration
  const API_BASE_URL =
    process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8080/api/v1";

  // Voice recording functions
  const startTimer = () => {
    timerRef.current = setInterval(() => {
      setVoiceState((prev) => ({
        ...prev,
        recordingTime: prev.recordingTime + 1,
      }));
    }, 1000);
  };

  const stopTimer = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  const startRecording = async () => {
    try {
      setVoiceState((prev) => ({ ...prev, recordingError: null }));
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100,
        },
      });

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: "audio/webm;codecs=opus",
      });

      const chunks: BlobPart[] = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: "audio/webm;codecs=opus" });
        setVoiceState((prev) => ({
          ...prev,
          audioBlob: blob,
          audioUrl: URL.createObjectURL(blob),
        }));

        stream.getTracks().forEach((track) => track.stop());
      };

      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start();
      setVoiceState((prev) => ({
        ...prev,
        isRecording: true,
        recordingTime: 0,
      }));
      startTimer();
    } catch (error) {
      console.error("Error starting recording:", error);
      if (error instanceof Error) {
        let errorMessage = "حدث خطأ أثناء بدء التسجيل";
        if (error.name === "NotAllowedError") {
          errorMessage =
            "يرجى السماح بالوصول للميكروفون لتسجيل الرسالة الصوتية";
        } else if (error.name === "NotFoundError") {
          errorMessage = "لم يتم العثور على ميكروفون متاح";
        }
        setVoiceState((prev) => ({ ...prev, recordingError: errorMessage }));
      }
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && voiceState.isRecording) {
      mediaRecorderRef.current.stop();
      setVoiceState((prev) => ({ ...prev, isRecording: false }));
      stopTimer();
    }
  };

  const playRecording = () => {
    if (voiceState.audioUrl && audioRef.current) {
      if (voiceState.isPlaying) {
        audioRef.current.pause();
        setVoiceState((prev) => ({ ...prev, isPlaying: false }));
      } else {
        audioRef.current.src = voiceState.audioUrl;
        audioRef.current.play();
        setVoiceState((prev) => ({ ...prev, isPlaying: true }));

        audioRef.current.onended = () => {
          setVoiceState((prev) => ({ ...prev, isPlaying: false }));
        };
      }
    }
  };

  const deleteRecording = () => {
    if (voiceState.audioUrl) {
      URL.revokeObjectURL(voiceState.audioUrl);
    }
    setVoiceState({
      isRecording: false,
      audioBlob: null,
      audioUrl: null,
      recordingTime: 0,
      isPlaying: false,
      recordingError: null,
    });
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.src = "";
    }
  };

  // Form validation function
  const validateForm = (formData: FormData) => {
    const errors: FormErrors = {};

    const firstName = (formData.get("firstName") as string)?.trim();
    const phone = (formData.get("phone") as string)?.trim();
    const course = formData.get("course") as string;
    const preferredMethod = formData.get("preferredMethod") as string;

    if (!firstName) {
      errors.firstName = "الاسم مطلوب";
    } else if (firstName.length < 2) {
      errors.firstName = "الاسم يجب أن يكون أكثر من حرفين";
    }

    if (!phone) {
      errors.phone = "رقم الهاتف مطلوب";
    } else if (!/^[0-9+\-\s()]+$/.test(phone)) {
      errors.phone = "رقم الهاتف غير صحيح";
    }

    if (!course) {
      errors.course = "يرجى اختيار البرنامج التدريبي";
    }

    if (!preferredMethod) {
      errors.preferredMethod = "يرجى اختيار طريقة التعلم";
    }

    return errors;
  };

  // Upload voice message function
  const uploadVoiceMessage = async (audioBlob: Blob): Promise<string> => {
    setFormState((prev) => ({ ...prev, isUploadingVoice: true }));
    try {
      // Option 1: Try Cloudinary first
      const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;

      if (cloudName) {
        const formData = new FormData();
        formData.append("file", audioBlob);
        formData.append("upload_preset", "voice_messages");
        formData.append("resource_type", "video");
        formData.append("folder", "eertqaa/voice-messages");

        const timestamp = Date.now();
        formData.append("public_id", `voice_message_${timestamp}`);

        console.log("Trying Cloudinary upload...");

        const response = await fetch(
          `https://api.cloudinary.com/v1_1/${cloudName}/upload`,
          {
            method: "POST",
            body: formData,
          }
        );

        const result = await response.json();

        if (response.ok) {
          console.log("Cloudinary upload successful:", result.secure_url);
          return result.secure_url;
        } else {
          console.warn("Cloudinary failed, trying fallback:", result);
        }
      }

      // Option 2: Fallback to file.io
      console.log("Using fallback upload service...");

      const fallbackFormData = new FormData();
      fallbackFormData.append(
        "file",
        audioBlob,
        `voice_message_${Date.now()}.webm`
      );

      const fallbackResponse = await fetch("https://file.io", {
        method: "POST",
        body: fallbackFormData,
      });

      if (!fallbackResponse.ok) {
        throw new Error(`Fallback upload failed: ${fallbackResponse.status}`);
      }

      const fallbackResult = await fallbackResponse.json();

      if (fallbackResult.success && fallbackResult.link) {
        console.log("Fallback upload successful:", fallbackResult.link);
        return fallbackResult.link;
      } else {
        throw new Error("Fallback upload failed");
      }
    } catch (error) {
      console.error("Voice upload error:", error);
      throw new Error("فشل في رفع الرسالة الصوتية");
    } finally {
      setFormState((prev) => ({ ...prev, isUploadingVoice: false }));
    }
  };

  // Clear form errors when user interacts with inputs
  const clearFieldError = (fieldName: string) => {
    if (formState.formErrors[fieldName]) {
      setFormState((prev) => {
        const newErrors = { ...prev.formErrors };
        delete newErrors[fieldName];
        return { ...prev, formErrors: newErrors };
      });
    }
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Reset previous states
    setFormState((prev) => ({
      ...prev,
      formErrors: {},
      submitSuccess: false,
      submitMessage: "",
    }));

    const formData = new FormData(e.target as HTMLFormElement);

    // Validate form
    const errors = validateForm(formData);
    if (Object.keys(errors).length > 0) {
      setFormState((prev) => ({ ...prev, formErrors: errors }));
      return;
    }

    setFormState((prev) => ({ ...prev, isSubmitting: true }));

    try {
      // Get form values
      const firstName = (formData.get("firstName") as string).trim();
      const phone = (formData.get("phone") as string).trim();
      const course = formData.get("course") as string;
      const preferredMethod = formData.get("preferredMethod") as string;
      const message = (formData.get("message") as string)?.trim() || "";

      let voiceMessageUrl = "";

      // Upload voice message if exists
      if (voiceState.audioBlob) {
        try {
          voiceMessageUrl = await uploadVoiceMessage(voiceState.audioBlob);
        } catch (error) {
          setFormState((prev) => ({
            ...prev,
            formErrors: {
              voiceMessage:
                error instanceof Error
                  ? error.message
                  : "فشل في رفع الرسالة الصوتية",
            },
            isSubmitting: false,
          }));
          return;
        }
      }

      // Prepare API payload
      const payload = {
        name: firstName,
        phone: phone,
        selectedProgram: course,
        learningPreference:
          preferredMethod === "online"
            ? "أونلاين عبر زوم"
            : "حضورياً في الجامعة",
        message: message,
        voiceMessage: voiceMessageUrl,
      };

      // Submit form to API
      const response = await fetch(`${API_BASE_URL}/leads`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.message || `HTTP ${response.status}: فشل في إرسال الطلب`
        );
      }

      const result = await response.json();

      // Success handling
      setFormState((prev) => ({
        ...prev,
        submitSuccess: true,
        submitMessage: `تم إرسال طلب التسجيل بنجاح! رقم الطلب: ${
          result.data?.id?.substring(0, 8) || "غير محدد"
        }`,
      }));

      // Reset form
      (e.target as HTMLFormElement).reset();
      setSelectedCourse("");
      deleteRecording();

      // Scroll to success message
      setTimeout(() => {
        const successElement = document.getElementById("success-message");
        if (successElement) {
          successElement.scrollIntoView({
            behavior: "smooth",
            block: "center",
          });
        }
      }, 100);
    } catch (error) {
      console.error("Form submission error:", error);
      setFormState((prev) => ({
        ...prev,
        formErrors: {
          submit:
            error instanceof Error
              ? error.message
              : "حدث خطأ أثناء إرسال الطلب. يرجى المحاولة مرة أخرى.",
        },
      }));
    } finally {
      setFormState((prev) => ({ ...prev, isSubmitting: false }));
    }
  };

  // Cleanup effect
  useEffect(() => {
    return () => {
      stopTimer();
      if (voiceState.audioUrl) {
        URL.revokeObjectURL(voiceState.audioUrl);
      }
      if (
        mediaRecorderRef.current &&
        mediaRecorderRef.current.state !== "inactive"
      ) {
        mediaRecorderRef.current.stop();
      }
    };
  }, [voiceState.audioUrl]);

  return (
    <section
      id="register"
      className="py-24 bg-gradient-to-br from-indigo-600 via-blue-600 to-purple-700 relative overflow-hidden"
    >
      {/* Background Elements */}
      <div className="absolute inset-0 bg-black opacity-10"></div>
      <div className="absolute top-0 right-0 w-96 h-96 bg-white rounded-full mix-blend-overlay filter blur-xl opacity-20"></div>
      <div className="absolute bottom-0 left-0 w-96 h-96 bg-white rounded-full mix-blend-overlay filter blur-xl opacity-20"></div>

      <div className="relative max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <div className="inline-flex items-center px-4 py-2 rounded-full bg-white/20 text-white text-sm font-medium mb-6">
            <svg
              className="w-4 h-4 ml-2"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
            تسجيل مجاني
          </div>
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 arabic-heading">
            سجل الآن
          </h2>
          <p className="text-xl text-indigo-100 max-w-2xl mx-auto arabic-text">
            احجز مكانك في البرنامج القادم واحصل على شهادة معتمدة من جامعة عين
            شمس
          </p>
        </div>

        <div className="bg-white text-background rounded-3xl shadow-2xl p-8 md:p-12">
          {selectedCourse && (
            <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-xl">
              <div className="flex items-center">
                <svg
                  className="w-5 h-5 text-green-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clipRule="evenodd"
                  />
                </svg>
                <span className="text-green-800 font-semibold">
                  تم اختيار البرنامج: {selectedCourse}
                </span>
              </div>
            </div>
          )}

          {/* Success Message */}
          {formState.submitSuccess && (
            <div
              id="success-message"
              className="mb-8 p-6 bg-green-50 border-2 border-green-200 rounded-2xl"
            >
              <div className="flex items-center">
                <svg
                  className="w-8 h-8 text-green-600 ml-3"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clipRule="evenodd"
                  />
                </svg>
                <div>
                  <h4 className="text-green-800 font-bold text-lg">
                    تم إرسال الطلب بنجاح!
                  </h4>
                  <p className="text-green-700 mt-1">
                    {formState.submitMessage}
                  </p>
                  <p className="text-green-600 text-sm mt-2">
                    سيتم التواصل معك قريباً لتأكيد التسجيل.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Global Error Message */}
          {formState.formErrors.submit && (
            <div className="mb-8 p-6 bg-red-50 border-2 border-red-200 rounded-2xl">
              <div className="flex items-center">
                <svg
                  className="w-8 h-8 text-red-600 ml-3"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                    clipRule="evenodd"
                  />
                </svg>
                <div>
                  <h4 className="text-red-800 font-bold text-lg">
                    خطأ في إرسال الطلب
                  </h4>
                  <p className="text-red-700 mt-1">
                    {formState.formErrors.submit}
                  </p>
                </div>
              </div>
            </div>
          )}

          <form className="space-y-8" onSubmit={handleFormSubmit}>
            {/* Personal Information */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clipRule="evenodd"
                  />
                </svg>
                المعلومات الشخصية
              </h3>
              <div className="group">
                <label
                  htmlFor="firstName"
                  className="block text-sm font-semibold text-gray-700 mb-3"
                >
                  الاسم *
                </label>
                <div className="relative">
                  <input
                    type="text"
                    id="firstName"
                    name="firstName"
                    required
                    onInput={() => clearFieldError("firstName")}
                    className={`w-full px-4 py-4 border-2 rounded-xl focus:ring-2 transition-all duration-300 bg-white ${
                      formState.formErrors.firstName
                        ? "border-red-500 focus:ring-red-500 focus:border-red-500"
                        : "border-gray-200 focus:ring-indigo-500 focus:border-indigo-500 hover:border-gray-300"
                    }`}
                    placeholder="أدخل اسمك الأول"
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    {formState.formErrors.firstName ? (
                      <svg
                        className="h-5 w-5 text-red-500"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clipRule="evenodd"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                        />
                      </svg>
                    )}
                  </div>
                </div>
                {formState.formErrors.firstName && (
                  <p className="mt-2 text-sm text-red-600 flex items-center">
                    <svg
                      className="w-4 h-4 ml-1"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    {formState.formErrors.firstName}
                  </p>
                )}
              </div>
            </div>

            {/* Contact Information */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                  <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                </svg>
                معلومات التواصل
              </h3>
              <div className="group">
                <label
                  htmlFor="phone"
                  className="block text-sm font-semibold text-gray-700 mb-3"
                >
                  رقم الهاتف *
                </label>
                <div className="relative">
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    required
                    onInput={() => clearFieldError("phone")}
                    className={`w-full px-4 py-4 border-2 rounded-xl focus:ring-2 transition-all duration-300 bg-white ${
                      formState.formErrors.phone
                        ? "border-red-500 focus:ring-red-500 focus:border-red-500"
                        : "border-gray-200 focus:ring-indigo-500 focus:border-indigo-500 hover:border-gray-300"
                    }`}
                    placeholder="+20 123 456 7890"
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    {formState.formErrors.phone ? (
                      <svg
                        className="h-5 w-5 text-red-500"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clipRule="evenodd"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                        />
                      </svg>
                    )}
                  </div>
                </div>
                {formState.formErrors.phone && (
                  <p className="mt-2 text-sm text-red-600 flex items-center">
                    <svg
                      className="w-4 h-4 ml-1"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    {formState.formErrors.phone}
                  </p>
                )}
              </div>
            </div>

            {/* Course Selection */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                اختيار البرنامج التدريبي
              </h3>
              <div className="group">
                <label
                  htmlFor="course"
                  className="block text-sm font-semibold text-gray-700 mb-3"
                >
                  اختر البرنامج التدريبي *
                </label>
                <div className="relative">
                  <select
                    id="course"
                    name="course"
                    required
                    value={selectedCourse}
                    onChange={(e) => {
                      setSelectedCourse(e.target.value);
                      clearFieldError("course");
                    }}
                    className={`w-full px-4 py-4 border-2 rounded-xl focus:ring-2 transition-all duration-300 bg-white appearance-none ${
                      formState.formErrors.course
                        ? "border-red-500 focus:ring-red-500 focus:border-red-500"
                        : "border-gray-200 focus:ring-indigo-500 focus:border-indigo-500 hover:border-gray-300"
                    }`}
                  >
                    <option value="">اختر البرنامج التدريبي</option>
                    {courses.map((course) => (
                      <option key={course.id} value={course.title}>
                        {course.title} - {course.category.name}
                      </option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    {formState.formErrors.course ? (
                      <svg
                        className="h-5 w-5 text-red-500"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clipRule="evenodd"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    )}
                  </div>
                </div>
                {formState.formErrors.course && (
                  <p className="mt-2 text-sm text-red-600 flex items-center">
                    <svg
                      className="w-4 h-4 ml-1"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    {formState.formErrors.course}
                  </p>
                )}
              </div>
            </div>

            {/* Learning Preferences */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                    clipRule="evenodd"
                  />
                </svg>
                تفضيلات التعلم
              </h3>
              <div className="group">
                <label
                  htmlFor="preferredMethod"
                  className="block text-sm font-semibold text-gray-700 mb-3"
                >
                  طريقة التعلم المفضلة *
                </label>
                <div className="relative">
                  <select
                    id="preferredMethod"
                    name="preferredMethod"
                    required
                    onChange={() => clearFieldError("preferredMethod")}
                    className={`w-full px-4 py-4 border-2 rounded-xl focus:ring-2 transition-all duration-300 bg-white appearance-none ${
                      formState.formErrors.preferredMethod
                        ? "border-red-500 focus:ring-red-500 focus:border-red-500"
                        : "border-gray-200 focus:ring-indigo-500 focus:border-indigo-500 hover:border-gray-300"
                    }`}
                  >
                    <option value="">اختر طريقة التعلم</option>
                    <option value="online">أونلاين عبر زوم</option>
                    <option value="offline">حضورياً في الجامعة</option>
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    {formState.formErrors.preferredMethod ? (
                      <svg
                        className="h-5 w-5 text-red-500"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clipRule="evenodd"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    )}
                  </div>
                </div>
                {formState.formErrors.preferredMethod && (
                  <p className="mt-2 text-sm text-red-600 flex items-center">
                    <svg
                      className="w-4 h-4 ml-1"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    {formState.formErrors.preferredMethod}
                  </p>
                )}
              </div>
            </div>

            {/* Additional Message */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"
                    clipRule="evenodd"
                  />
                </svg>
                رسالة إضافية
              </h3>
              <div className="group">
                <label
                  htmlFor="message"
                  className="block text-sm font-semibold text-gray-700 mb-3"
                >
                  أخبرنا عن توقعاتك أو أي استفسارات (اختياري)
                </label>
                <textarea
                  id="message"
                  name="message"
                  rows={4}
                  className="w-full px-4 py-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-300 bg-white hover:border-gray-300 resize-none"
                  placeholder="أخبرنا عن توقعاتك من البرنامج أو أي استفسارات لديك..."
                ></textarea>
              </div>
            </div>

            {/* Voice Recording */}
            <div className="bg-gray-100 rounded-2xl p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                <svg
                  className="w-5 h-5 text-indigo-600 ml-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fillRule="evenodd"
                    d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z"
                    clipRule="evenodd"
                  />
                </svg>
                رسالة صوتية (اختياري)
              </h3>
              <div className="group">
                <label className="block text-sm font-semibold text-gray-700 mb-3">
                  أرسل رسالة صوتية لتخبرنا عن توقعاتك أو استفساراتك
                </label>

                {(voiceState.recordingError ||
                  formState.formErrors.voiceMessage) && (
                  <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-center">
                      <svg
                        className="w-5 h-5 text-red-600 ml-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                          clipRule="evenodd"
                        />
                      </svg>
                      <span className="text-red-800 text-sm">
                        {voiceState.recordingError ||
                          formState.formErrors.voiceMessage}
                      </span>
                    </div>
                  </div>
                )}

                {/* Voice Upload Progress */}
                {formState.isUploadingVoice && (
                  <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center">
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 ml-2"></div>
                      <span className="text-blue-800 text-sm">
                        جاري رفع الرسالة الصوتية...
                      </span>
                    </div>
                  </div>
                )}

                {!voiceState.audioBlob ? (
                  <div className="space-y-4">
                    {!voiceState.isRecording ? (
                      <button
                        type="button"
                        onClick={startRecording}
                        className="w-full flex items-center justify-center px-6 py-4 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
                      >
                        <svg
                          className="w-6 h-6 ml-2"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fillRule="evenodd"
                            d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z"
                            clipRule="evenodd"
                          />
                        </svg>
                        ابدأ التسجيل
                      </button>
                    ) : (
                      <div className="space-y-4">
                        <div className="flex items-center justify-center space-x-4">
                          <div className="flex items-center space-x-2">
                            <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                            <span className="text-red-600 font-semibold">
                              جاري التسجيل...
                            </span>
                          </div>
                          <div className="text-lg font-mono font-bold text-gray-900">
                            {formatTime(voiceState.recordingTime)}
                          </div>
                        </div>

                        <div className="flex space-x-3">
                          <button
                            type="button"
                            onClick={stopRecording}
                            className="flex-1 flex items-center justify-center px-4 py-3 bg-gray-600 text-white rounded-xl hover:bg-gray-700 transition-all duration-300"
                          >
                            <svg
                              className="w-5 h-5 ml-2"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path
                                fillRule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z"
                                clipRule="evenodd"
                              />
                            </svg>
                            إيقاف التسجيل
                          </button>
                        </div>

                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                          <p className="text-yellow-800 text-sm text-center">
                            💡 نصيحة: تحدث بوضوح واذكر اسمك والبرامج المطلوبة
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                          <svg
                            className="w-5 h-5 text-green-600 ml-2"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                          >
                            <path
                              fillRule="evenodd"
                              d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                              clipRule="evenodd"
                            />
                          </svg>
                          <span className="text-green-800 font-semibold">
                            تم التسجيل بنجاح!
                          </span>
                        </div>
                        <span className="text-green-700 font-mono text-sm">
                          {formatTime(voiceState.recordingTime)}
                        </span>
                      </div>

                      <div className="flex space-x-2">
                        <button
                          type="button"
                          onClick={playRecording}
                          className="flex-1 flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-300"
                        >
                          {voiceState.isPlaying ? (
                            <>
                              <svg
                                className="w-4 h-4 ml-2"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z"
                                  clipRule="evenodd"
                                />
                              </svg>
                              إيقاف
                            </>
                          ) : (
                            <>
                              <svg
                                className="w-4 h-4 ml-2"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                                  clipRule="evenodd"
                                />
                              </svg>
                              تشغيل
                            </>
                          )}
                        </button>

                        <button
                          type="button"
                          onClick={() => {
                            deleteRecording();
                            setVoiceState((prev) => ({
                              ...prev,
                              recordingError: null,
                            }));
                          }}
                          className="flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-300"
                        >
                          <svg
                            className="w-4 h-4 ml-2"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                          >
                            <path
                              fillRule="evenodd"
                              d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                              clipRule="evenodd"
                            />
                          </svg>
                          حذف
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                <audio ref={audioRef} className="hidden" />

                <div className="mt-3 text-xs text-gray-500">
                  💡 الرسالة الصوتية ستساعدنا في فهم احتياجاتك بشكل أفضل
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="text-center pt-6">
              <button
                type="submit"
                disabled={formState.isSubmitting || formState.isUploadingVoice}
                className={`group py-5 px-12 rounded-2xl text-lg font-bold transition-all duration-300 shadow-2xl w-full md:w-auto ${
                  formState.isSubmitting || formState.isUploadingVoice
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-gradient-to-r from-indigo-600 to-blue-600 text-white hover:from-indigo-700 hover:to-blue-700 hover:shadow-indigo-500/25 transform hover:-translate-y-1"
                }`}
              >
                <span className="flex items-center justify-center">
                  {formState.isSubmitting || formState.isUploadingVoice ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white ml-2"></div>
                      {formState.isUploadingVoice
                        ? "جاري رفع الرسالة الصوتية..."
                        : "جاري إرسال الطلب..."}
                    </>
                  ) : (
                    <>
                      <svg
                        className="w-5 h-5 ml-2 group-hover:scale-110 transition-transform"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                        />
                      </svg>
                      إرسال الطلب الآن
                    </>
                  )}
                </span>
              </button>
              <p className="text-sm text-gray-500 mt-4">
                * جميع الحقول المطلوبة يجب ملؤها
              </p>
              {(formState.isSubmitting || formState.isUploadingVoice) && (
                <p className="text-sm text-blue-600 mt-2">
                  يرجى الانتظار... لا تقم بإغلاق الصفحة
                </p>
              )}
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}
